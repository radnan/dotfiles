# Helpful LS_COLORS
eval `dircolors ~/.dircolors`

# Source bash scripts
for f in ~/.bash/*; do source $f; done

# Prompt
WHITE="\[\033[0;0m\]"
RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
PS1="${RED}\@ ${GREEN}\u@\h ${BLUE}\w${PURPLE}\$(__git_ps1) ${WHITE}\nÎ» "

# Ignore duplicates and commands that start with spaces
export HISTCONTROL=ignoreboth
export HISTSIZE=10000
export HISTFILESIZE=10000

# Always color grep
export GREP_OPTIONS='--color=auto'

# Helpful ls aliases/defaults
alias ls='ls --color=auto -F'
alias ll='ls -Flh'
alias lla='ll -a'

# Always use vim tabs
alias vim='vim -p'

# Helpful tree defaults
alias tree='tree -F --dirsfirst'

alias dc='docker-compose'

alias pgrep="pgrep -lf"
alias :q="exit"

function git-tag()
{
	git tag -a "$1" -m "Release $1";
	git push --tags;
}

# Quickly grep and list search results
function g()
{
	grep -inrI "$@" *
}
function gf()
{
	g "$@" | gawk -F ':' '{ print $1 }' | sort -u;
}

function mysqltabledump()
{
	mysqldump $1 `mysql $1 -AN -e "select group_concat(table_name separator ' ') from information_schema.tables where table_name like '$2'"`
}

# List files after cd
function cs()
{
	builtin cd "$@" && ls
}
alias cd="cs"

function sst()
{
  ssh -nNT -L 127.0.0.1:$1:localhost:$1 radnan@radnan-work-pc
}

function sst_cmp()
{
  concurrently "ssh -nNT -L 127.0.0.1:3000:localhost:3000 radnan@radnan-work-pc" "ssh -nNT -L 127.0.0.1:35729:localhost:35729 radnan@radnan-work-pc"
}

_nc_docker_completion() {
    COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \
                COMP_CWORD=$COMP_CWORD \
                _NC_DOCKER_COMPLETE=complete nc-docker ) )
    return 0
}
complete -o default -F _nc_docker_completion nc-docker
alias ncd="nc-docker"
complete -o default -F _nc_docker_completion ncd

code-artifact() {
  code-artifact-token-helper
  export AWS_CODEARTIFACT_AUTH_TOKEN=$(cat ~/.nc_codeartifact_token)
}

if [ -f $(brew --prefix)/etc/bash_completion ]; then
	. $(brew --prefix)/etc/bash_completion
fi

export PROMPT_COMMAND='history -a;history -c;history -r'

_ssh_py() {
    local cur opts

    cur="${COMP_WORDS[COMP_CWORD]}"
    local IFS=$'\n'
    opts=$(ec2inventory --complete --env=\* --cache)
    COMPREPLY=( $(compgen -W "$opts" -- $cur ) )
    return 0
}
complete -F _ssh_py srv

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval "$(starship init bash)"
